import Head from "next/head";
import { useState } from "react";
import { api } from "~/utils/api";
import { SignedIn } from "@clerk/nextjs";
import type { NextPage } from "next";
import { PageLayout } from "~/components/layout";
import styles from "./index.module.css";

const Manage: NextPage = () => {
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    latitude: "",
    longitude: "",
  });

  const createStore = api.stores.add.useMutation();

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createStore.mutateAsync({
        storeName: formData.name,
        storeDesc: formData.description,
        lat: parseFloat(formData.latitude),
        lng: parseFloat(formData.longitude),
      });
      alert("Store created successfully!");
      setFormData({ name: "", description: "", latitude: "", longitude: "" });
    } catch (error) {
      console.error(error);
      alert("Failed to create store.");
    }
  };

  const { data, isLoading } = api.stores.getAllStores.useQuery();

  if (isLoading) return <div>Loading...</div>;
  if (!data) return <div>Something went wrong</div>;
  console.log(data);

  return (
    <>
      <Head>
        <title>Tables</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <SignedIn>
          You are about to manage
          <form onSubmit={handleSubmit}>
            <div>
              <div className={styles.storesformpair}>
                <label htmlFor="name">Store Name</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  required
                />
              </div>
              <div className={styles.storesformpair}>
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleChange}
                />
              </div>
              <div className={styles.storesformpair}>
                <label htmlFor="latitude">Latitude</label>
                <input
                  type="number"
                  id="latitude"
                  name="latitude"
                  value={formData.latitude}
                  onChange={handleChange}
                  required
                />
              </div>
              <div className={styles.storesformpair}>
                <label htmlFor="longitude">Longitude</label>
                <input
                  type="number"
                  id="longitude"
                  name="longitude"
                  value={formData.longitude}
                  onChange={handleChange}
                  required
                />
              </div>
            </div>
            <div className={styles.storesformsubmitbutton}>
              <button type="submit" disabled={createStore.isPending}>
                {createStore.isPending ? "Creating..." : "Create Store"}
              </button>
            </div>
          </form>
          <input type="file" />
        </SignedIn>
      </PageLayout>
    </>
  );
};

export default Manage;
